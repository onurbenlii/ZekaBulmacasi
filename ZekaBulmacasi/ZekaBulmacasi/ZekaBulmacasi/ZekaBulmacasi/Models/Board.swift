// Board.swift
import Foundation

enum Symbol: String, Codable {
    case empty
    case black // ğŸŒ™
    case white // ğŸŸ¡
}

enum Sign: String, Codable {
    case equals // =
    case cross // X
    case notEquals
    case arrow
}

struct Position: Hashable, Codable, Equatable {
    let fromRow: Int
    let fromCol: Int
    let toRow: Int
    let toCol: Int

    // Codable iÃ§in gerekli init ve coding keys
    enum CodingKeys: String, CodingKey {
        case fromRow = "from_row"
        case fromCol = "from_col"
        case toRow = "to_row"
        case toCol = "to_col"
    }

    init(from: (Int, Int), to: (Int, Int)) {
        self.fromRow = from.0
        self.fromCol = from.1
        self.toRow = to.0
        self.toCol = to.1
    }

    // Equatable iÃ§in == fonksiyonu
    static func == (lhs: Position, rhs: Position) -> Bool {
        return lhs.fromRow == rhs.fromRow &&
               lhs.fromCol == rhs.fromCol &&
               lhs.toRow == rhs.toRow &&
               lhs.toCol == rhs.toCol
    }

    // Hashable iÃ§in hash fonksiyonu
    func hash(into hasher: inout Hasher) {
        hasher.combine(fromRow)
        hasher.combine(fromCol)
        hasher.combine(toRow)
        hasher.combine(toCol)
    }

    // YardÄ±mcÄ± fonksiyon: Eski kodlarla uyumluluk iÃ§in
    var from: (Int, Int) {
        return (fromRow, fromCol)
    }

    var to: (Int, Int) {
        return (toRow, toCol)
    }
}

struct Board {
    var grid: [[Symbol]]
    var signs: [Position: Sign]
    let size: Int

    init(size: Int) {
        self.size = size
        self.grid = Array(repeating: Array(repeating: .empty, count: size), count: size)
        self.signs = [:]
    }

    func isValid() -> (Bool, String) {
        // Kural 1: TÃ¼m hÃ¼creler dolu olmalÄ± (empty hÃ¼cre kalmamalÄ±)
        for row in 0..<size {
            for col in 0..<size {
                if grid[row][col] == .empty {
                    return (false, "Hata: (\(row), \(col)) karesi boÅŸ!")
                }
            }
        }

        // Kural 2: Yatay ve dikey olarak aynÄ± tÃ¼rden en fazla 2 hÃ¼cre yan yana olabilir
        // Yatay kontrol
        for row in 0..<size {
            for col in 0..<(size - 2) {
                if grid[row][col] != .empty && grid[row][col] == grid[row][col + 1] && grid[row][col] == grid[row][col + 2] {
                    return (false, "Hata: (\(row), \(col)) satÄ±rÄ±nda 3 aynÄ± sembol yan yana!")
                }
            }
        }

        // Dikey kontrol
        for col in 0..<size {
            for row in 0..<(size - 2) {
                if grid[row][col] != .empty && grid[row][col] == grid[row + 1][col] && grid[row][col] == grid[row + 2][col] {
                    return (false, "Hata: (\(row), \(col)) sÃ¼tununda 3 aynÄ± sembol yan yana!")
                }
            }
        }

        // Kural 3: Her satÄ±r ve sÃ¼tun eÅŸit sayÄ±da black ve white iÃ§ermeli (6x6 iÃ§in 3 black, 3 white)
        for row in 0..<size {
            let blackCount = grid[row].filter { $0 == .black }.count
            let whiteCount = grid[row].filter { $0 == .white }.count
            if blackCount != 3 || whiteCount != 3 {
                return (false, "Hata: \(row). satÄ±rda \(blackCount) black ve \(whiteCount) white var, eÅŸit olmalÄ±!")
            }
        }

        for col in 0..<size {
            let blackCount = (0..<size).filter { grid[$0][col] == .black }.count
            let whiteCount = (0..<size).filter { grid[$0][col] == .white }.count
            if blackCount != 3 || whiteCount != 3 {
                return (false, "Hata: \(col). sÃ¼tunda \(blackCount) black ve \(whiteCount) white var, eÅŸit olmalÄ±!")
            }
        }

        // Kural 4: = iÅŸaretiyle ayrÄ±lan hÃ¼creler aynÄ± tÃ¼rde olmalÄ±
        // Kural 5: X iÅŸaretiyle ayrÄ±lan hÃ¼creler zÄ±t tÃ¼rde olmalÄ±
        for (position, sign) in signs {
            let (row1, col1) = position.from
            let (row2, col2) = position.to

            let symbol1 = grid[row1][col1]
            let symbol2 = grid[row2][col2]

            if symbol1 == .empty || symbol2 == .empty {
                return (false, "Hata: Ä°ÅŸaretli hÃ¼creler boÅŸ! (\(row1), \(col1)) ve (\(row2), \(col2))")
            }

            switch sign {
            case .equals:
                if symbol1 != symbol2 {
                    return (false, "Hata: (\(row1), \(col1)) ve (\(row2), \(col2)) aynÄ± tÃ¼rde olmalÄ±!")
                }
            case .cross:
                if symbol1 == symbol2 {
                    return (false, "Hata: (\(row1), \(col1)) ve (\(row2), \(col2)) zÄ±t tÃ¼rde olmalÄ±!")
                }
            case .notEquals:
                if symbol1 == symbol2 {
                    return (false, "Hata: (\(row1), \(col1)) ve (\(row2), \(col2)) farklÄ± tÃ¼rde olmalÄ±!")
                }
            case .arrow:
                // Arrow iÅŸareti ÅŸu an kullanÄ±lmÄ±yor, bu yÃ¼zden bu kuralÄ± atlÄ±yoruz
                break
            }
        }

        return (true, "Tahta geÃ§erli!")
    }
}
